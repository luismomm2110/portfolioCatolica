name: Search-Flight

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and start containers
      run: docker-compose up -d

    - name: Retrieve container logs
      run: docker-compose logs app

    - name: Lint with flake8
      run: docker-compose exec -T app flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Test with pytest and coverage
      run: docker-compose exec -T app pytest --cov-report xml --cov=.

    - name: Copy coverage to root
      run: docker cp portfoliocatolica_app_1:/app/coverage.xml .

    - name: Adjust coverage report
      run: python adjust_coverage.py

    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage.xml

    # Clean up
    - name: Stop and remove containers
      run: docker-compose down

  frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"  # or whatever version you prefer

      - name: Install dependencies
        run: |
          cd client/search_flights
          npm ci  

      - name: Type check with TypeScript
        run: |
          cd client/search_flights  # Navigate to your frontend directory if it's in a subdirectory
          npx tsc --noEmit  # This will run TypeScript's type checker

      - name: Run frontend tests
        run: |
          cd client/search_flights  # Navigate to your frontend directory if it's in a subdirectory
          npm test  # This assumes you have a test script in your package.json

  sonarcloud:
    needs: backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Docker image for SonarCloud analysis
        run: docker build -t myapp .

      - name: Run SonarCloud Scan inside Docker
        run: >
          docker run --name myapp-container -d myapp tail -f /dev/null
          && docker cp ./coverage.xml myapp-container:/app/coverage.xml
          && docker exec myapp-container sonar-scanner 
            -Dsonar.projectKey=luismomm 
            -Dsonar.organization=luismomm 
            -Dsonar.host.url=https://sonarcloud.io 
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.coverageReportPaths=/app/coverage.xml
          && docker stop myapp-container